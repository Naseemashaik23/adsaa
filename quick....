import java.util.Scanner;
public class QuickSort {
    public static void quicksort(int[] a, int low, int high) {
        if (low < high) {
            int j = partition(a, low, high);
            quicksort(a, low, j - 1);
            quicksort(a, j + 1, high);
        }
    }
    public static int partition(int[] a, int low, int high) {
        int pivot = a[low];
        int i = low + 1;
        int j = high;
        while (i <= j) {
            while (i <= j && a[i] <= pivot) {
                i++;
            }
            while (i <= j && a[j] >= pivot) {
                j--;
            }
            if (i < j) {
                swap(a, i, j);
            }
        }
        swap(a, low, j);
        return j;
    }
    public static void swap(int[] a, int i, int j) {

        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
    private static long measureTime(int[] arr) {
        long startTime = System.nanoTime();
        quicksort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        return (endTime - startTime);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();
        int[] array = new int[n];
        System.out.println("Enter the elements in the array:");
        for (int i = 0; i < n; i++) {
            array[i] = sc.nextInt();
        }
        long executionTime = measureTime(array);
        System.out.println("After sorting:");

        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println("\nExecution Time: " + executionTime + " nanoseconds");
        sc.close();
    }

}
