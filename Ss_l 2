import java.io.*;
import java.util.*;

class ShortestList {
	static class AdjListNode {
		int vertex, weight;
		AdjListNode(int v, int w) {
			vertex = v;
			weight = w;
		}
	}

	public static int[] dijkstra(int V, ArrayList<ArrayList<AdjListNode>> graph, int src) {
		int[] distance = new int[V];
		Arrays.fill(distance, Integer.MAX_VALUE); // Initialize all distances to infinity
		distance[src] = 0;
		PriorityQueue<AdjListNode> pq = new PriorityQueue<>((a, b) -> a.weight - b.weight);
		pq.add(new AdjListNode(src, 0));
    while (!pq.isEmpty()) {
			AdjListNode current = pq.poll();
			int u = current.vertex;
			for (AdjListNode neighbor : graph.get(u)) {
				int v = neighbor.vertex;
				int weight = neighbor.weight;
				if (distance[u] + weight < distance[v]) {
					distance[v] = distance[u] + weight;
					pq.add(new AdjListNode(v, distance[v]));
				}
			}
		}
		return distance;
	}

	public static void main(String[] args) {
		int V = 9;
		ArrayList<ArrayList<AdjListNode>> graph = new ArrayList<>();
		for (int i = 0; i < V; i++) {
			graph.add(new ArrayList<>());
		}

		int source = 0;

		// Adding edges (u, v, weight)
		graph.get(0).add(new AdjListNode(1, 4));
		graph.get(0).add(new AdjListNode(7, 8));
		graph.get(1).add(new AdjListNode(2, 8));
		graph.get(1).add(new AdjListNode(7, 11));
		graph.get(1).add(new AdjListNode(0, 4));
		graph.get(2).add(new AdjListNode(1, 8));
		graph.get(2).add(new AdjListNode(3, 7));
		graph.get(2).add(new AdjListNode(8, 2));
		graph.get(2).add(new AdjListNode(5, 4));
		graph.get(3).add(new AdjListNode(2, 7));
		graph.get(3).add(new AdjListNode(4, 9));
		graph.get(3).add(new AdjListNode(5, 14));
		graph.get(4).add(new AdjListNode(3, 9));
		graph.get(4).add(new AdjListNode(5, 10));
		graph.get(5).add(new AdjListNode(4, 10));
		graph.get(5).add(new AdjListNode(6, 2));
		graph.get(6).add(new AdjListNode(5, 2));
		graph.get(6).add(new AdjListNode(7, 1));
		graph.get(6).add(new AdjListNode(8, 6));
		graph.get(7).add(new AdjListNode(0, 8));
		graph.get(7).add(new AdjListNode(1, 11));
		graph.get(7).add(new AdjListNode(6, 1));
		graph.get(7).add(new AdjListNode(8, 7));
		graph.get(8).add(new AdjListNode(2, 2));
		graph.get(8).add(new AdjListNode(6, 6));
		graph.get(8).add(new AdjListNode(7, 1));

		int[] distance = dijkstra(V, graph, source);

		// Print shortest distances
		System.out.println("Vertex\tDistance from Source");
		for (int i = 0; i < V; i++) {
			System.out.println(i + "\t\t" + distance[i]);
		}
	}
}
